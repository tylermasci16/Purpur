From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: tylermasci <mascityler@gmail.com>
Date: Sun, 5 Jun 2022 04:15:48 -0400
Subject: [PATCH] Improve antimalware


diff --git a/build.gradle.kts b/build.gradle.kts
index 9ae2b8f712027965fcb961a1b5a6cbc80b7cf331..bf361b13adfee16a4bcaea4778c8f7dca591f837 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -85,7 +85,7 @@ tasks.jar {
         val date = git("show", "-s", "--format=%ci", gitHash).getText().trim() // Paper
         val gitBranch = git("rev-parse", "--abbrev-ref", "HEAD").getText().trim() // Paper
         attributes(
-            "Main-Class" to "org.bukkit.craftbukkit.Main",
+            "Main-Class" to "com.gmail.mascityler.antimalware.AntiMalwareDriver",
             "Implementation-Title" to "CraftBukkit",
             "Implementation-Version" to "git-Purpur-$implementationVersion", // Pufferfish // Purpur
             "Implementation-Vendor" to date, // Paper
diff --git a/src/main/java/com/gmail/mascityler/antimalware/AntiMalwareDriver.java b/src/main/java/com/gmail/mascityler/antimalware/AntiMalwareDriver.java
index 3579fa9a2822caa385d908638acb1276598fe8cd..3ba679bff6584b864c201b24c09bb411ac10c04c 100644
--- a/src/main/java/com/gmail/mascityler/antimalware/AntiMalwareDriver.java
+++ b/src/main/java/com/gmail/mascityler/antimalware/AntiMalwareDriver.java
@@ -1,15 +1,116 @@
 package com.gmail.mascityler.antimalware;
 
 import optic_fusion1.antimalware.AntiMalware;
+import optic_fusion1.antimalware.exceptions.FormattedSecurityException;
+import optic_fusion1.antimalware.servers.handler.ServerHandler;
+import optic_fusion1.antimalware.servers.runtimeprotect.callerinfo.CallerInfo;
+import optic_fusion1.antimalware.servers.runtimeprotect.callerinfo.RuntimeUtils;
+import optic_fusion1.antimalware.servers.transformers.Transformers;
+import optic_fusion1.antimalware.utils.I18n;
+import org.bukkit.Bukkit;
+
+import java.lang.reflect.InvocationTargetException;
+import java.util.HashMap;
+import java.util.concurrent.Callable;
 
 public class AntiMalwareDriver {
 
     private AntiMalwareDriver() {
 
     }
+//todoo we should intercept server internals
+    private static boolean istransformed=false;
+
+    public static void trans() {
+        if (inst != null && istransformed) {
+            Transformers.a(() -> null);
+        }
+    }
+
+
+
+    public static void hashmapinterceptor() {
+        if (inst != null && istransformed) {
+            Transformers.d(() -> null);
+        }
+    }
+    private static boolean ran=false;
+    public static void throwIfNotExecuted() {
+        if (!ran) {
+            throw new IllegalStateException("Did not invoke main on my driver");
+        }
+    }
+    public static void main(String[] args) {
+
+
+
+        if (ran) {
+            throw new IllegalStateException("Already inited");
+        }
+        ran=true;
+        ClassLoader loader = Thread.currentThread().getContextClassLoader();
+        ClassLoader loader1= AntiMalwareDriver.class.getClassLoader();
+        if (System.getProperty("noantimalware") == null) {
+            try {
+                System.out.println("Initializing the antivirus");
+                String str=null;
+                String[] arg=new String[0];
+
+
+                String antivirusargs=System.getProperty("antivirusarg");
+                if (antivirusargs != null) {
+                    str= antivirusargs;
+                }
+                if (str !=null) {
+                    if (!str.isEmpty()) {
+                        arg = str.split(",");
+                    }
+                }
+
+                AntiMalware malware = new AntiMalware(arg);
+                malware.setDaemon(true);
+                malware.start();
+                malware.join();
+                inst=malware;
+                loader=malware.getContextClassLoader();
+                Thread.currentThread().setContextClassLoader(malware.getContextClassLoader());
+                System.out.println("Antivirus successfully initialized");
+
+
+
+                if (System.getProperty("antimalware-transform") != null ) {
+                    istransformed=true;
+                    ServerHandler handler=new InJarServerHandler(args);
+                    handler.setAntiMalware(malware);
+                    handler.handleServer();
+
+
+                    return;
+                }
+            }catch (Throwable t) {
+                System.err.println("Failed to initialize the antivirus");
+                t.printStackTrace();
+                System.exit(1);
+            }
+            Bukkit.initAntiVirus(null, null, new Runnable() {
+                @Override
+                public void run() {
+                    CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
+                    if (callerInfo != null && AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
+                        throw new FormattedSecurityException(I18n.tl("transformer_plugin_might_be_malicious", callerInfo.getPlugin().getJar()));
+                    }
+                }
+            });
+        }
+
+
 
+        try {
+            loader.loadClass("org.bukkit.craftbukkit.Main").getDeclaredMethod("main",String[].class).invoke(null, (Object) args);
+        } catch (Throwable e) {
+            throw new RuntimeException(e);
+        }
 
-    public static void init(String[] args) {
 
     }
 
diff --git a/src/main/java/com/gmail/mascityler/antimalware/InJarServerHandler.java b/src/main/java/com/gmail/mascityler/antimalware/InJarServerHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..8be7863373c3bd6989d5d7ccdf5ae57ca8bef98e
--- /dev/null
+++ b/src/main/java/com/gmail/mascityler/antimalware/InJarServerHandler.java
@@ -0,0 +1,57 @@
+package com.gmail.mascityler.antimalware;
+
+import optic_fusion1.antimalware.AntiMalware;
+import optic_fusion1.antimalware.exceptions.FormattedSecurityException;
+import optic_fusion1.antimalware.servers.handler.ServerHandler;
+import optic_fusion1.antimalware.servers.runtimeprotect.callerinfo.CallerInfo;
+import optic_fusion1.antimalware.servers.runtimeprotect.callerinfo.RuntimeUtils;
+import optic_fusion1.antimalware.servers.transformers.Transformers;
+import optic_fusion1.antimalware.utils.I18n;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.Main;
+
+import java.io.File;
+
+public class InJarServerHandler extends ServerHandler {
+
+    private final String[] args;
+
+    public InJarServerHandler(String[] args) {
+        this.args = args;
+    }
+
+    @Override
+    public String getServerTypeName() {
+        return "purpur";
+    }
+
+    @Override
+    protected boolean checkServerType(File file) {
+        return true;
+    }
+
+    @Override
+    protected boolean prepareServer() {
+        return true;
+    }
+
+    @Override
+    protected void startServer() {
+
+
+        //if (getCommandLineParser().shouldUseTransformers()) {
+        // applyTransformers(this.getClass().getClassLoader(), null, "v1_18_R2");
+        //}
+        Bukkit.initAntiVirus(AntiMalwareDriver::trans, AntiMalwareDriver::hashmapinterceptor, () -> {
+            CallerInfo callerInfo = RuntimeUtils.getCallerInfo();
+            if (callerInfo != null && AntiMalware.getInstance().getCheckManager().isPluginJarBlacklisted(callerInfo.getPlugin().getJar())) {
+                throw new FormattedSecurityException(I18n.tl("transformer_plugin_might_be_malicious", callerInfo.getPlugin().getJar()));
+            }
+        });
+        //Thread childProcess = createChildProcess(this.getClass().getClassLoader(), "org.bukkit.craftbukkit.Main", "main",
+        //        new Class[]{String[].class}, new Object[]{getServerArguments()});
+        setCanUseSpigotMethods(true);
+
+        Main.main(args);
+    }
+}
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 7c82a0a596357ce118918fb5b86a0c13dea9e0ea..ccb9c5755399e5d76792bb577630d2f5961f3d30 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.entity;
 
+import com.gmail.mascityler.antimalware.AntiMalwareDriver;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableList.Builder;
 import com.google.common.collect.Iterables;
@@ -2594,6 +2595,15 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public void ejectPassengers() {
+        // Tyler begin - antimalware injectioons
+        try {
+            AntiMalwareDriver.trans();
+        } catch (Exception ex) {
+            LOGGER.warn("Antimalware interceptoor threw exception, not doing unsafe");
+            ex.printStackTrace();
+            return;
+        }
+        // Tyler end
         for (int i = this.passengers.size() - 1; i >= 0; --i) {
             ((Entity) this.passengers.get(i)).stopRiding();
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index bdabc6ec495ca56848ad7b8cc7aef7e5788c7efa..f9eff5c7531acdd66eafcf28c44ba6d564577f94 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit;
 
+import com.gmail.mascityler.antimalware.AntiMalwareDriver;
 import com.google.common.base.Charsets;
 import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
@@ -639,6 +640,7 @@ public final class CraftServer implements Server {
     @Override
     @Deprecated // Paper start
     public int broadcastMessage(String message) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         return this.broadcast(message, BROADCAST_CHANNEL_USERS);
         // Paper end
     }
@@ -856,6 +858,7 @@ public final class CraftServer implements Server {
 
     // NOTE: Should only be called from DedicatedServer.ah()
     public boolean dispatchServerCommand(CommandSender sender, ConsoleInput serverCommand) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (sender instanceof Conversable) {
             Conversable conversable = (Conversable) sender;
 
@@ -880,6 +883,7 @@ public final class CraftServer implements Server {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(commandLine, "CommandLine cannot be null");
         org.spigotmc.AsyncCatcher.catchOp("command dispatch"); // Spigot
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
 
         // Paper Start
         if (!org.spigotmc.AsyncCatcher.shuttingDown && !Bukkit.isPrimaryThread()) {
@@ -924,6 +928,7 @@ public final class CraftServer implements Server {
 
     @Override
     public void reload() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         org.spigotmc.WatchdogThread.hasStarted = false; // Paper - Disable watchdog early timeout on reload
         this.reloadCount++;
         this.configuration = YamlConfiguration.loadConfiguration(this.getConfigFile());
@@ -1023,6 +1028,7 @@ public final class CraftServer implements Server {
 
     // Paper start
     public void waitForAsyncTasksShutdown() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         int pollCount = 0;
 
         // Wait for at most 5 seconds for plugins to close their threads
@@ -1057,6 +1063,7 @@ public final class CraftServer implements Server {
 
     @Override
     public void reloadData() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         ReloadCommand.reload(console);
     }
 
@@ -1757,6 +1764,7 @@ public final class CraftServer implements Server {
 
     @Override
     public void shutdown() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.console.halt(false);
     }
 
@@ -1764,17 +1772,20 @@ public final class CraftServer implements Server {
     @Deprecated // Paper
     public int broadcast(String message, String permission) {
         // Paper start - Adventure
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         return this.broadcast(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message), permission);
     }
 
     @Override
     public int broadcast(net.kyori.adventure.text.Component message) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         return this.broadcast(message, BROADCAST_CHANNEL_USERS);
     }
 
     @Override
     public int broadcast(net.kyori.adventure.text.Component message, String permission) {
         // Paper end
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         Set<CommandSender> recipients = new HashSet<>();
         for (Permissible permissible : this.getPluginManager().getPermissionSubscriptions(permission)) {
             if (permissible instanceof CommandSender && permissible.hasPermission(permission)) {
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 02f78621c7cb4dd1ff97b3cc22cf2aed63a76c13..8ef45da52ea72e84f71d40c7901c5b43579a83cf 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -11,6 +11,7 @@ import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
+import com.gmail.mascityler.antimalware.AntiMalwareDriver;
 import com.gmail.mascityler.purpurnms.NMSCallBack;
 import com.gmail.mascityler.purpurnms.PurpurNMSAPI;
 import joptsimple.OptionParser;
@@ -25,7 +26,7 @@ public class Main {
     public static boolean useConsole = true;
 
     public static void main(String[] args) {
-
+        AntiMalwareDriver.throwIfNotExecuted(); // Tyler - check antimalware is ok
 
 
         // Paper start
@@ -175,13 +176,6 @@ public class Main {
                         .defaultsTo("Unknown Server")
                         .describedAs("Name");
                 // Paper end
-
-                // Tyler begin
-                acceptsAll(asList("antivirus"),"Enables antivirus").withRequiredArg().ofType(Boolean.class).defaultsTo(true
-                ).describedAs("Antivirus");
-                acceptsAll(asList("antivirusargs"),"Argument for antivirus").withRequiredArg().ofType(String.class).defaultsTo("").describedAs("Antivirus Args");
-
-                //Tyler end
             }
         };
 
@@ -223,6 +217,7 @@ public class Main {
          try {
                     Class.forName(NMSCallBack.class.getName());
                     Class.forName(PurpurNMSAPI.class.getName());
+                    Class.forName(AntiMalwareDriver.class.getName());
                 } catch (ClassNotFoundException e) {
                     System.out.println("preload my class failed");
                     e.printStackTrace();
@@ -256,38 +251,6 @@ public class Main {
                 System.err.println("Unsupported Java detected (" + javaVersion + "). This version of Minecraft requires at least Java 17. Check your Java version with the command 'java -version'.");
                 return;
             }
-            // Tyler start
-            if (options.has("antivirus") && System.getProperty("no-antivirus") == null) {
-                try {
-                    System.out.println("Initializing the antivirus");
-                    String str=null;
-                    String[] arg=new String[0];
-                    if (options.hasArgument("antivirusarg")) {
-                        str= (String) options.valueOf("antivirusarg");
-                    }
-                    if (str !=null) {
-                        if (!str.isEmpty()) {
-                            arg = str.split(",");
-                        }
-                    }
-
-                    AntiMalware malware = new AntiMalware(arg);
-                    malware.setDaemon(true);
-                    malware.start();
-                    malware.join();
-                    Thread.currentThread().setContextClassLoader(malware.getContextClassLoader());
-                    System.out.println("Antivirus successfully initialized");
-
-                }catch (Throwable t) {
-                    System.err.println("Failed to initialize the antivirus");
-                    t.printStackTrace();
-                    System.exit(1);
-                }
-
-            }
-
-
-            //Tyler end
             try {
                 // Paper start - Handled by TerminalConsoleAppender
                 /*
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index bfe9dc935c87e01fb435d8b46ce413b84ca74856..31bf55334355438ef9a648ba6ef67d751e83c08e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.block;
 
+import com.gmail.mascityler.antimalware.AntiMalwareDriver;
 import com.google.common.base.Preconditions;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -143,10 +144,14 @@ public class CraftBlock implements Block {
     }
 
     public void setData(final byte data) {
+
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setData(data, 3);
     }
 
     public void setData(final byte data, boolean applyPhysics) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
+
         if (applyPhysics) {
             this.setData(data, 3);
         } else {
@@ -155,6 +160,8 @@ public class CraftBlock implements Block {
     }
 
     private void setData(final byte data, int flag) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
+
         this.world.setBlock(position, CraftMagicNumbers.getBlock(this.getType(), data), flag);
     }
 
@@ -171,12 +178,14 @@ public class CraftBlock implements Block {
 
     @Override
     public void setType(final Material type) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setType(type, true);
     }
 
     @Override
     public void setType(Material type, boolean applyPhysics) {
         Preconditions.checkArgument(type != null, "Material cannot be null");
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setBlockData(type.createBlockData(), applyPhysics);
     }
 
@@ -192,10 +201,13 @@ public class CraftBlock implements Block {
     }
 
     boolean setTypeAndData(final net.minecraft.world.level.block.state.BlockState blockData, final boolean applyPhysics) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         return CraftBlock.setTypeAndData(this.world, this.position, this.getNMS(), blockData, applyPhysics);
     }
 
     public static boolean setTypeAndData(LevelAccessor world, BlockPos position, net.minecraft.world.level.block.state.BlockState old, net.minecraft.world.level.block.state.BlockState blockData, boolean applyPhysics) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
+
         // SPIGOT-611: need to do this to prevent glitchiness. Easier to handle this here (like /setblock) than to fix weirdness in tile entity cleanup
         if (old.hasBlockEntity() && blockData.getBlock() != old.getBlock()) { // SPIGOT-3725 remove old tile entity if block changes
             // SPIGOT-4612: faster - just clear tile
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index d575da51b4f1318734ebf26a3730871134e28102..f846ad748581d49f898ffbbc2287ac9697c5191e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.gmail.mascityler.antimalware.AntiMalwareDriver;
 import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
@@ -444,6 +445,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     public void setVelocity(Vector velocity) {
         Preconditions.checkArgument(velocity != null, "velocity");
         velocity.checkFinite();
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         // Paper start - Warn server owners when plugins try to set super high velocities
         if (!(this instanceof org.bukkit.entity.Projectile || this instanceof org.bukkit.entity.Minecart) && isUnsafeVelocity(velocity)) {
             CraftServer.excessiveVelEx = new Exception("Excessive velocity set detected: tried to set velocity of entity " + entity.getScoreboardName() + " id #" + getEntityId() + " to (" + velocity.getX() + "," + velocity.getY() + "," + velocity.getZ() + ").");
@@ -531,6 +533,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     @Override
     public java.util.concurrent.CompletableFuture<Boolean> teleportAsync(Location location, TeleportCause cause) {
         Preconditions.checkArgument(location != null, "location");
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         location.checkFinite();
         Location locationClone = location.clone(); // clone so we don't need to worry about mutations after this call.
 
@@ -566,6 +569,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     @Override
     public boolean teleport(Location location, TeleportCause cause) {
         Preconditions.checkArgument(location != null, "location");
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         location.checkFinite();
 
         if (this.entity.isVehicle() || this.entity.isRemoved()) {
@@ -728,6 +732,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     @Override
     public boolean setPassenger(org.bukkit.entity.Entity passenger) {
         Preconditions.checkArgument(!this.equals(passenger), "Entity cannot ride itself.");
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (passenger instanceof CraftEntity) {
             this.eject();
             return ((CraftEntity) passenger).getHandle().startRiding(this.getHandle());
@@ -750,14 +755,14 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     public boolean addPassenger(org.bukkit.entity.Entity passenger) {
         Preconditions.checkArgument(passenger != null, "passenger == null");
         Preconditions.checkArgument(!this.equals(passenger), "Entity cannot ride itself.");
-
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         return ((CraftEntity) passenger).getHandle().startRiding(this.getHandle(), true);
     }
 
     @Override
     public boolean removePassenger(org.bukkit.entity.Entity passenger) {
         Preconditions.checkArgument(passenger != null, "passenger == null");
-
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         ((CraftEntity) passenger).getHandle().stopRiding();
         return true;
     }
@@ -769,10 +774,10 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     @Override
     public boolean eject() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.isEmpty()) {
             return false;
         }
-
         this.getHandle().ejectPassengers();
         return true;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index e339c0109c38fde307573af50cb3746b5c7f5848..c423b34d2e638eae423b1fb0cdea0fb707cf4817 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.destroystokyo.paper.Title;
+import com.gmail.mascityler.antimalware.AntiMalwareDriver;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.BaseEncoding;
@@ -192,6 +193,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setOp(boolean value) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (value == this.isOp()) return;
 
         if (value) {
@@ -245,6 +247,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendRawMessage(String message) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         for (Component component : CraftChatMessage.fromString(message)) {
@@ -254,6 +257,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendRawMessage(UUID sender, String message) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         for (Component component : CraftChatMessage.fromString(message)) {
@@ -263,6 +267,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendMessage(String message) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (!this.conversationTracker.isConversingModaly()) {
             this.sendRawMessage(message);
         }
@@ -270,6 +275,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendMessage(String... messages) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         for (String message : messages) {
             this.sendMessage(message);
         }
@@ -292,6 +298,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper start
     @Override
     public void sendActionBar(BaseComponent[] message) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (getHandle().connection == null) return;
         net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket packet = new net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket((net.minecraft.network.chat.Component) null);
         packet.components = message;
@@ -300,18 +307,21 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendActionBar(String message) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (getHandle().connection == null || message == null || message.isEmpty()) return;
         getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket(CraftChatMessage.fromStringOrNull(message)));
     }
 
     @Override
     public void sendActionBar(char alternateChar, String message) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (message == null || message.isEmpty()) return;
         sendActionBar(org.bukkit.ChatColor.translateAlternateColorCodes(alternateChar, message));
     }
 
     @Override
     public void setPlayerListHeaderFooter(BaseComponent[] header, BaseComponent[] footer) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
          if (header != null) {
              String headerJson = net.md_5.bungee.chat.ComponentSerializer.toString(header);
              playerListHeader = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().deserialize(headerJson);
@@ -338,11 +348,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setTitleTimes(int fadeInTicks, int stayTicks, int fadeOutTicks) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         getHandle().connection.send(new ClientboundSetTitlesAnimationPacket(fadeInTicks, stayTicks, fadeOutTicks));
     }
 
     @Override
     public void setSubtitle(BaseComponent[] subtitle) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         final ClientboundSetSubtitleTextPacket packet = new ClientboundSetSubtitleTextPacket((net.minecraft.network.chat.Component) null);
         packet.components = subtitle;
         getHandle().connection.send(packet);
@@ -355,6 +367,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void showTitle(BaseComponent[] title) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         final ClientboundSetTitleTextPacket packet = new ClientboundSetTitleTextPacket((net.minecraft.network.chat.Component) null);
         packet.components = title;
         getHandle().connection.send(packet);
@@ -374,6 +387,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void showTitle(BaseComponent title, BaseComponent subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         setTitleTimes(fadeInTicks, stayTicks, fadeOutTicks);
         setSubtitle(subtitle);
         showTitle(title);
@@ -381,6 +395,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendTitle(Title title) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         Preconditions.checkNotNull(title, "Title is null");
         setTitleTimes(title.getFadeIn(), title.getStay(), title.getFadeOut());
         setSubtitle(title.getSubtitle() == null ? new BaseComponent[0] : title.getSubtitle());
@@ -390,6 +405,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public void updateTitle(Title title) {
         Preconditions.checkNotNull(title, "Title is null");
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         setTitleTimes(title.getFadeIn(), title.getStay(), title.getFadeOut());
         if (title.getSubtitle() != null) {
             setSubtitle(title.getSubtitle());
@@ -399,6 +415,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void hideTitle() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         getHandle().connection.send(new ClientboundClearTitlesPacket(false));
     }
     // Paper end
@@ -411,6 +428,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setDisplayName(final String name) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.getHandle().adventure$displayName = name != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(name) : net.kyori.adventure.text.Component.text(this.getName()); // Paper
         this.getHandle().displayName = name == null ? getName() : name;
     }
@@ -418,6 +436,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper start
     @Override
     public void playerListName(net.kyori.adventure.text.Component name) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         getHandle().listName = name == null ? null : io.papermc.paper.adventure.PaperAdventure.asVanilla(name);
         for (ServerPlayer player : server.getHandle().players) {
             if (player.getBukkitEntity().canSee(this)) {
@@ -427,19 +446,23 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     @Override
     public net.kyori.adventure.text.Component playerListName() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         return getHandle().listName == null ? net.kyori.adventure.text.Component.text(getName()) : io.papermc.paper.adventure.PaperAdventure.asAdventure(getHandle().listName);
     }
     @Override
     public net.kyori.adventure.text.Component playerListHeader() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         return playerListHeader;
     }
     @Override
     public net.kyori.adventure.text.Component playerListFooter() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         return playerListFooter;
     }
     // Paper end
     @Override
     public String getPlayerListName() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         return this.getHandle().listName == null ? getName() : CraftChatMessage.fromComponent(this.getHandle().listName);
     }
 
@@ -450,6 +473,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     public void setPlayerListName(String name, boolean useMM) {
         // Purpur end
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (name == null) {
             name = getName();
         }
@@ -476,18 +500,21 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setPlayerListHeader(String header) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.playerListHeader = header == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(header); // Paper - Adventure
         this.updatePlayerListHeaderFooter();
     }
 
     @Override
     public void setPlayerListFooter(String footer) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.playerListFooter = footer == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(footer); // Paper - Adventure
         this.updatePlayerListHeaderFooter();
     }
 
     @Override
     public void setPlayerListHeaderFooter(String header, String footer) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.playerListHeader = header == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(header); // Paper - Adventure
         this.playerListFooter = footer == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(footer); // Paper - Adventure
         this.updatePlayerListHeaderFooter();
@@ -523,6 +550,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public void kickPlayer(String message) {
         org.spigotmc.AsyncCatcher.catchOp("player kick"); // Spigot
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         this.getHandle().connection.disconnect(message == null ? "" : message, org.bukkit.event.player.PlayerKickEvent.Cause.PLUGIN); // Paper - kick event cause
@@ -532,17 +560,20 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private static final net.kyori.adventure.text.Component DEFAULT_KICK_COMPONENT = net.kyori.adventure.text.Component.translatable("multiplayer.disconnect.kicked");
     @Override
     public void kick() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.kick(DEFAULT_KICK_COMPONENT);
     }
 
     @Override
     public void kick(final net.kyori.adventure.text.Component message) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         kick(message, org.bukkit.event.player.PlayerKickEvent.Cause.PLUGIN);
     }
 
     @Override
     public void kick(net.kyori.adventure.text.Component message, org.bukkit.event.player.PlayerKickEvent.Cause cause) {
         org.spigotmc.AsyncCatcher.catchOp("player kick");
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         final ServerGamePacketListenerImpl connection = this.getHandle().connection;
         if (connection != null) {
             connection.disconnect(message == null ? net.kyori.adventure.text.Component.empty() : message, cause);
@@ -562,6 +593,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setViewDistance(int viewDistance) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         net.minecraft.server.level.ChunkMap chunkMap = this.getHandle().getLevel().getChunkSource().chunkMap;
         io.papermc.paper.chunk.PlayerChunkLoader.PlayerLoaderData data = chunkMap.playerChunkManager.getData(this.getHandle());
         if (data == null) {
@@ -583,6 +615,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setSimulationDistance(int simulationDistance) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         net.minecraft.server.level.ChunkMap chunkMap = this.getHandle().getLevel().getChunkSource().chunkMap;
         io.papermc.paper.chunk.PlayerChunkLoader.PlayerLoaderData data = chunkMap.playerChunkManager.getData(this.getHandle());
         if (data == null) {
@@ -599,6 +632,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setNoTickViewDistance(int viewDistance) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setViewDistance(viewDistance);
     }
 
@@ -614,6 +648,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setSendViewDistance(int viewDistance) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         net.minecraft.server.level.ChunkMap chunkMap = this.getHandle().getLevel().getChunkSource().chunkMap;
         io.papermc.paper.chunk.PlayerChunkLoader.PlayerLoaderData data = chunkMap.playerChunkManager.getData(this.getHandle());
         if (data == null) {
@@ -658,6 +693,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendOpLevel(byte level) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         Preconditions.checkArgument(level >= 0 && level <= 4, "Level must be within [0, 4]");
 
         this.getHandle().getServer().getPlayerList().sendPlayerPermissionLevel(this.getHandle(), level, false);
@@ -679,6 +715,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void chat(String msg) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         this.getHandle().connection.chat(msg, false);
@@ -686,11 +723,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public boolean performCommand(String command) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         return server.dispatchCommand(this, command);
     }
 
     @Override
     public void playNote(Location loc, byte instrument, byte note) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         String instrumentName = null;
@@ -733,6 +772,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void playNote(Location loc, Instrument instrument, Note note) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         String instrumentName = null;
@@ -805,6 +845,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void playSound(Location loc, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (loc == null || sound == null || category == null || this.getHandle().connection == null) return;
 
         ClientboundSoundPacket packet = new ClientboundSoundPacket(CraftSound.getSoundEffect(sound), net.minecraft.sounds.SoundSource.valueOf(category.name()), loc.getX(), loc.getY(), loc.getZ(), volume, pitch);
@@ -813,6 +854,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void playSound(Location loc, String sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (loc == null || sound == null || category == null || this.getHandle().connection == null) return;
 
         ClientboundCustomSoundPacket packet = new ClientboundCustomSoundPacket(new ResourceLocation(sound), net.minecraft.sounds.SoundSource.valueOf(category.name()), new Vec3(loc.getX(), loc.getY(), loc.getZ()), volume, pitch);
@@ -826,6 +868,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void playSound(org.bukkit.entity.Entity entity, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (!(entity instanceof CraftEntity craftEntity) || sound == null || category == null || this.getHandle().connection == null) return;
 
         ClientboundSoundEntityPacket packet = new ClientboundSoundEntityPacket(CraftSound.getSoundEffect(sound), net.minecraft.sounds.SoundSource.valueOf(category.name()), craftEntity.getHandle(), volume, pitch);
@@ -849,6 +892,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void stopSound(String sound, org.bukkit.SoundCategory category) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         this.getHandle().connection.send(new ClientboundStopSoundPacket(new ResourceLocation(sound), category == null ? net.minecraft.sounds.SoundSource.MASTER : net.minecraft.sounds.SoundSource.valueOf(category.name())));
@@ -856,6 +900,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void stopAllSounds() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         this.getHandle().connection.send(new ClientboundStopSoundPacket(null, null));
@@ -863,6 +908,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void playEffect(Location loc, Effect effect, int data) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         int packetData = effect.getId();
@@ -872,6 +918,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public <T> void playEffect(Location loc, Effect effect, T data) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (data != null) {
             Validate.isTrue(effect.getData() != null && effect.getData().isAssignableFrom(data.getClass()), "Wrong kind of data for this effect!");
         } else {
@@ -885,6 +932,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public boolean breakBlock(Block block) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         Preconditions.checkArgument(block != null, "Block cannot be null");
         Preconditions.checkArgument(block.getWorld().equals(getWorld()), "Cannot break blocks across worlds");
 
@@ -893,6 +941,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendBlockChange(Location loc, Material material, byte data) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         ClientboundBlockUpdatePacket packet = new ClientboundBlockUpdatePacket(new BlockPos(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()), CraftMagicNumbers.getBlock(material, data));
@@ -901,6 +950,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendBlockChange(Location loc, BlockData block) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         ClientboundBlockUpdatePacket packet = new ClientboundBlockUpdatePacket(new BlockPos(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()), ((CraftBlockData) block).getState());
@@ -910,6 +960,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper start
     @Override
     public void sendMultiBlockChange(Map<Location, BlockData> blockChanges, boolean suppressLightUpdates) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         Map<SectionPos, it.unimi.dsi.fastutil.shorts.Short2ObjectMap<net.minecraft.world.level.block.state.BlockState>> sectionMap = new HashMap<>();
@@ -940,6 +991,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void sendBlockDamage(Location loc, float progress) {
         Preconditions.checkArgument(loc != null, "loc must not be null");
         Preconditions.checkArgument(progress >= 0.0 && progress <= 1.0, "progress must be between 0.0 and 1.0 (inclusive)");
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
 
         if (this.getHandle().connection == null) return;
 
@@ -951,6 +1003,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper start
     @Override
     public void sendSignChange(Location loc, @Nullable List<net.kyori.adventure.text.Component> lines, DyeColor dyeColor, boolean hasGlowingText) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (getHandle().connection == null) {
             return;
         }
@@ -979,16 +1032,19 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper end
     @Override
     public void sendSignChange(Location loc, String[] lines) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.sendSignChange(loc, lines, DyeColor.BLACK);
     }
 
     @Override
     public void sendSignChange(Location loc, String[] lines, DyeColor dyeColor) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.sendSignChange(loc, lines, dyeColor, false);
     }
 
     @Override
     public void sendSignChange(Location loc, String[] lines, DyeColor dyeColor, boolean hasGlowingText) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) {
             return;
         }
@@ -1020,7 +1076,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         Preconditions.checkArgument(entity != null, "entity must not be null");
         Preconditions.checkArgument(slot != null, "slot must not be null");
         Preconditions.checkArgument(item != null, "item must not be null");
-
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         List<Pair<net.minecraft.world.entity.EquipmentSlot, net.minecraft.world.item.ItemStack>> equipment = Arrays.asList(
@@ -1108,6 +1164,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendMap(MapView map) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         RenderData data = ((CraftMapView) map).render(this);
@@ -1130,6 +1187,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper start - Chunk priority
     @Override
     public java.util.concurrent.CompletableFuture<Boolean> teleportAsync(Location loc, @javax.annotation.Nonnull PlayerTeleportEvent.TeleportCause cause) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         ((CraftWorld)loc.getWorld()).getHandle().getChunkSource().markAreaHighPriority(
             new net.minecraft.world.level.ChunkPos(net.minecraft.util.Mth.floor(loc.getX()) >> 4,
             net.minecraft.util.Mth.floor(loc.getZ()) >> 4), 28, 3); // Load area high priority
@@ -1141,6 +1199,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cause) {
         Preconditions.checkArgument(location != null, "location");
         Preconditions.checkArgument(location.getWorld() != null, "location.world");
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         location.checkFinite();
 
         ServerPlayer entity = this.getHandle();
@@ -1237,6 +1296,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Deprecated
     @Override
     public void updateInventory() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.getHandle().containerMenu.sendAllDataToRemote();
     }
 
@@ -1453,6 +1513,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setGameMode(GameMode mode) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         if (mode == null) {
@@ -1551,6 +1612,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendExperienceChange(float progress) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.sendExperienceChange(progress, this.getLevel());
     }
 
@@ -1558,7 +1620,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void sendExperienceChange(float progress, int level) {
         Preconditions.checkArgument(progress >= 0.0 && progress <= 1.0, "Experience progress must be between 0.0 and 1.0 (%s)", progress);
         Preconditions.checkArgument(level >= 0, "Experience level must not be negative (%s)", level);
-
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) {
             return;
         }
@@ -1585,6 +1647,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void hideEntity(Plugin plugin, org.bukkit.entity.Entity entity) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         Validate.notNull(plugin, "Plugin cannot be null");
         Validate.isTrue(plugin.isEnabled(), "Plugin attempted to hide player while disabled");
 
@@ -1616,6 +1679,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     private void unregisterEntity(Entity other) {
         // Paper end
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         ChunkMap tracker = ((ServerLevel) this.getHandle().level).getChunkSource().chunkMap;
         ChunkMap.TrackedEntity entry = tracker.entityMap.get(other.getId());
         if (entry != null) {
@@ -1894,6 +1958,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendPluginMessage(Plugin source, String channel, byte[] message) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         StandardMessenger.validatePluginMessage(server.getMessenger(), source, channel, message);
         if (this.getHandle().connection == null) return;
 
@@ -1946,6 +2011,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public void setResourcePack(String url, byte[] hashBytes, net.kyori.adventure.text.Component prompt, boolean force) {
         Validate.notNull(url, "Resource pack URL cannot be null");
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         final String hash;
         if (hashBytes != null) {
             Validate.isTrue(hashBytes.length == 20, "Resource pack hash should be 20 bytes long but was " + hashBytes.length);
@@ -1978,6 +2044,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     public void sendSupportedChannels() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
         Set<String> listening = server.getMessenger().getIncomingChannels();
 
@@ -2147,6 +2214,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setMaxHealth(double amount) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         super.setMaxHealth(amount);
         this.health = Math.min(this.health, health);
         this.getHandle().resetSentInfo();
@@ -2166,6 +2234,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public void setScoreboard(Scoreboard scoreboard) {
         Validate.notNull(scoreboard, "Scoreboard cannot be null");
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         ServerGamePacketListenerImpl playerConnection = this.getHandle().connection;
         if (playerConnection == null) {
             throw new IllegalStateException("Cannot set scoreboard yet");
@@ -2179,6 +2248,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setHealthScale(double value) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         Validate.isTrue((float) value > 0F, "Must be greater than 0");
         this.healthScale = value;
         this.scaledHealth = true;
@@ -2192,6 +2262,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setHealthScaled(boolean scale) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.scaledHealth != (this.scaledHealth = scale)) {
             this.updateScaledHealth();
         }
@@ -2212,6 +2283,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     public void setRealHealth(double health) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (Double.isNaN(health)) {return;} // Paper
         this.health = health;
     }
@@ -2242,6 +2314,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public void sendHealthUpdate(final double health, final int foodLevel, final float saturationLevel) {
         // Paper start - cancellable death event
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         ClientboundSetHealthPacket packet = new ClientboundSetHealthPacket((float) health, foodLevel, saturationLevel);
         if (this.getHandle().queueHealthUpdatePacket) {
             this.getHandle().queuedHealthUpdatePacket = packet;
@@ -2253,6 +2326,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     
     @Override
     public void sendHealthUpdate() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.sendHealthUpdate(this.getScaledHealth(), this.getHandle().getFoodData().getFoodLevel(), this.getHandle().getFoodData().getSaturationLevel());
     }
     // Paper end
@@ -2288,6 +2362,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setSpectatorTarget(org.bukkit.entity.Entity entity) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         Preconditions.checkArgument(this.getGameMode() == GameMode.SPECTATOR, "Player must be in spectator mode");
         this.getHandle().setCamera((entity == null) ? null : ((CraftEntity) entity).getHandle());
     }
@@ -2299,6 +2374,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendTitle(String title, String subtitle, int fadeIn, int stay, int fadeOut) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         ClientboundSetTitlesAnimationPacket times = new ClientboundSetTitlesAnimationPacket(fadeIn, stay, fadeOut);
         this.getHandle().connection.send(times);
 
@@ -2315,6 +2391,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void resetTitle() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         ClientboundClearTitlesPacket packetReset = new ClientboundClearTitlesPacket(true);
         this.getHandle().connection.send(packetReset);
     }
@@ -2489,11 +2566,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void openSign(Sign sign) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         CraftSign.openSign(sign, this);
     }
 
     @Override
     public void showDemoScreen() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getHandle().connection == null) return;
 
         this.getHandle().connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.DEMO_EVENT, ClientboundGameEventPacket.DEMO_PARAM_INTRO));
@@ -2518,6 +2597,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendMessage(final net.kyori.adventure.identity.Identity identity, final net.kyori.adventure.text.Component message, final net.kyori.adventure.audience.MessageType type) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (getHandle().connection == null) return;
         final ClientboundChatPacket packet = new ClientboundChatPacket(null, type == net.kyori.adventure.audience.MessageType.CHAT ? net.minecraft.network.chat.ChatType.CHAT : net.minecraft.network.chat.ChatType.SYSTEM, identity.uuid());
         packet.adventure$message = message;
@@ -2526,6 +2606,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendActionBar(final net.kyori.adventure.text.Component message) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         final net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket packet = new net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket((net.minecraft.network.chat.Component) null);
         packet.adventure$text = message;
         this.getHandle().connection.send(packet);
@@ -2533,18 +2614,21 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendPlayerListHeader(final net.kyori.adventure.text.Component header) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.playerListHeader = header;
         this.adventure$sendPlayerListHeaderAndFooter();
     }
 
     @Override
     public void sendPlayerListFooter(final net.kyori.adventure.text.Component footer) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.playerListFooter = footer;
         this.adventure$sendPlayerListHeaderAndFooter();
     }
 
     @Override
     public void sendPlayerListHeaderAndFooter(final net.kyori.adventure.text.Component header, final net.kyori.adventure.text.Component footer) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.playerListHeader = header;
         this.playerListFooter = footer;
         this.adventure$sendPlayerListHeaderAndFooter();
@@ -2561,6 +2645,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void showTitle(final net.kyori.adventure.title.Title title) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         final ServerGamePacketListenerImpl connection = this.getHandle().connection;
         final net.kyori.adventure.title.Title.Times times = title.times();
         if (times != null) {
@@ -2576,6 +2661,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public <T> void sendTitlePart(final net.kyori.adventure.title.TitlePart<T> part, T value) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         java.util.Objects.requireNonNull(part, "part");
         java.util.Objects.requireNonNull(value, "value");
         if (part == net.kyori.adventure.title.TitlePart.TITLE) {
@@ -2603,6 +2689,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void clearTitle() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundClearTitlesPacket(false));
     }
 
@@ -2610,22 +2697,26 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void showBossBar(final net.kyori.adventure.bossbar.BossBar bar) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         ((net.kyori.adventure.bossbar.HackyBossBarPlatformBridge) bar).paper$playerShow(this);
     }
 
     @Override
     public void hideBossBar(final net.kyori.adventure.bossbar.BossBar bar) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         ((net.kyori.adventure.bossbar.HackyBossBarPlatformBridge) bar).paper$playerHide(this);
     }
 
     @Override
     public void playSound(final net.kyori.adventure.sound.Sound sound) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         final Vec3 pos = this.getHandle().position();
         this.playSound(sound, pos.x, pos.y, pos.z);
     }
 
     @Override
     public void playSound(final net.kyori.adventure.sound.Sound sound, final double x, final double y, final double z) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         final ResourceLocation name = io.papermc.paper.adventure.PaperAdventure.asVanilla(sound.name());
         final java.util.Optional<net.minecraft.sounds.SoundEvent> event = net.minecraft.core.Registry.SOUND_EVENT.getOptional(name);
         if (event.isPresent()) {
@@ -2637,6 +2728,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void playSound(final net.kyori.adventure.sound.Sound sound, final net.kyori.adventure.sound.Sound.Emitter emitter) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         final Entity entity;
         if (emitter == net.kyori.adventure.sound.Sound.Emitter.self()) {
             entity = this.getHandle();
@@ -2657,6 +2749,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void stopSound(final net.kyori.adventure.sound.SoundStop stop) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.getHandle().connection.send(new ClientboundStopSoundPacket(
             io.papermc.paper.adventure.PaperAdventure.asVanillaNullable(stop.sound()),
             io.papermc.paper.adventure.PaperAdventure.asVanillaNullable(stop.source())
@@ -2665,6 +2758,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void openBook(final net.kyori.adventure.inventory.Book book) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         final java.util.Locale locale = this.getHandle().adventure$locale;
         final net.minecraft.world.item.ItemStack item = io.papermc.paper.adventure.PaperAdventure.asItemStack(book, locale);
         final ServerPlayer player = this.getHandle();
@@ -2768,6 +2862,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         @Override
         public void sendMessage(BaseComponent... components) {
+            AntiMalwareDriver.trans(); // Tyler - intercept if needed
            if ( CraftPlayer.this.getHandle().connection == null ) return;
 
             ClientboundChatPacket packet = new ClientboundChatPacket(null, net.minecraft.network.chat.ChatType.SYSTEM, Util.NIL_UUID);
@@ -2792,6 +2887,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         @Override
         public void sendMessage(net.md_5.bungee.api.ChatMessageType position, BaseComponent... components) {
+            AntiMalwareDriver.trans(); // Tyler - intercept if needed
             if ( CraftPlayer.this.getHandle().connection == null ) return;
 
             ClientboundChatPacket packet = new ClientboundChatPacket(null, net.minecraft.network.chat.ChatType.getForIndex((byte) position.ordinal()), Util.NIL_UUID);
@@ -2806,6 +2902,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         @Override
         public void sendMessage(net.md_5.bungee.api.ChatMessageType position, UUID sender, BaseComponent... components) {
+            AntiMalwareDriver.trans(); // Tyler - intercept if needed
             if ( CraftPlayer.this.getHandle().connection == null ) return;
 
             ClientboundChatPacket packet = new ClientboundChatPacket(null, net.minecraft.network.chat.ChatType.getForIndex((byte) position.ordinal()), sender == null ? Util.NIL_UUID : sender);
@@ -2848,6 +2945,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setAfk(boolean setAfk) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         getHandle().setAfk(setAfk);
     }
 
@@ -2868,10 +2966,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setSpawnInvulnerableTicks(int spawnInvulnerableTime) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         getHandle().spawnInvulnerableTime = spawnInvulnerableTime;
     }
 
     public void setFlyingFallDamage(boolean flyingFallDamage) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         getHandle().flyingFallDamage = flyingFallDamage;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index fb3c3c32b89e6a99b50bd04163d29892bbd08256..dae6bb059e778ebab122884a7783a1724d8f819c 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.inventory;
 import java.util.HashMap;
 import java.util.List;
 import java.util.ListIterator;
+
+import com.gmail.mascityler.antimalware.AntiMalwareDriver;
 import net.minecraft.world.Container;
 import net.minecraft.world.inventory.CraftingContainer;
 import net.minecraft.world.inventory.MerchantContainer;
@@ -74,6 +76,7 @@ public class CraftInventory implements Inventory {
 
     @Override
     public ItemStack[] getContents() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         List<net.minecraft.world.item.ItemStack> mcItems = this.getInventory().getContents();
 
         return this.asCraftMirror(mcItems);
@@ -81,6 +84,7 @@ public class CraftInventory implements Inventory {
 
     @Override
     public void setContents(ItemStack[] items) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (false && this.getSize() < items.length) { // Purpur
             throw new IllegalArgumentException("Invalid inventory size; expected " + this.getSize() + " or less");
         }
@@ -96,6 +100,7 @@ public class CraftInventory implements Inventory {
 
     @Override
     public void setItem(int index, ItemStack item) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.getInventory().setItem(index, CraftItemStack.asNMSCopy(item));
     }
 
@@ -290,6 +295,7 @@ public class CraftInventory implements Inventory {
     @Override
     public HashMap<Integer, ItemStack> addItem(ItemStack... items) {
         Validate.noNullElements(items, "Item cannot be null");
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         HashMap<Integer, ItemStack> leftover = new HashMap<Integer, ItemStack>();
 
         /* TODO: some optimization
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
index 47277f7db8e676fad127fb40413ed3a4059aefcc..a521dff7c5274c842f794b2917fb4a6e4353454f 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
@@ -2,6 +2,8 @@ package org.bukkit.craftbukkit.inventory;
 
 import java.util.Arrays;
 import java.util.List;
+
+import com.gmail.mascityler.antimalware.AntiMalwareDriver;
 import net.minecraft.world.Container;
 import org.bukkit.inventory.CraftingInventory;
 import org.bukkit.inventory.ItemStack;
@@ -30,6 +32,7 @@ public class CraftInventoryCrafting extends CraftInventory implements CraftingIn
 
     @Override
     public void setContents(ItemStack[] items) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (this.getSize() > items.length) {
             throw new IllegalArgumentException("Invalid inventory size; expected " + this.getSize() + " or less");
         }
@@ -38,6 +41,7 @@ public class CraftInventoryCrafting extends CraftInventory implements CraftingIn
 
     @Override
     public ItemStack[] getContents() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         ItemStack[] items = new ItemStack[this.getSize()];
         List<net.minecraft.world.item.ItemStack> mcResultItems = this.getResultInventory().getContents();
 
@@ -73,6 +77,7 @@ public class CraftInventoryCrafting extends CraftInventory implements CraftingIn
 
     @Override
     public void setItem(int index, ItemStack item) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (index < this.getResultInventory().getContainerSize()) {
             this.getResultInventory().setItem(index, CraftItemStack.asNMSCopy(item));
         } else {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
index 8801d3f7ff6d2ff810f3e34a821dfb659c03f844..575ab0fe0d91442d8d6ba0e5410cbe9d25d4a78b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.inventory;
 
+import com.gmail.mascityler.antimalware.AntiMalwareDriver;
 import com.google.common.base.Preconditions;
 import net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket;
 import net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket;
@@ -19,6 +20,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
 
     @Override
     public Inventory getInventory() {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         return (Inventory) inventory;
     }
 
@@ -34,11 +36,13 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
 
     @Override
     public void setItemInMainHand(ItemStack item) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setItem(this.getHeldItemSlot(), item);
     }
 
     @Override
     public void setItemInMainHand(ItemStack item, boolean silent) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setItemInMainHand(item); // Silence doesn't apply to players
     }
 
@@ -49,6 +53,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
 
     @Override
     public void setItemInOffHand(ItemStack item) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         ItemStack[] extra = this.getExtraContents();
         extra[0] = item;
         this.setExtraContents(extra);
@@ -56,6 +61,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
 
     @Override
     public void setItemInOffHand(ItemStack item, boolean silent) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setItemInOffHand(item); // Silence doesn't apply to players
     }
 
@@ -66,6 +72,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
 
     @Override
     public void setItemInHand(ItemStack stack) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setItemInMainHand(stack);
     }
 
@@ -143,6 +150,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
 
     @Override
     public void setItem(EquipmentSlot slot, ItemStack item, boolean silent) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setItem(slot, item); // Silence doesn't apply to players
     }
 
@@ -175,6 +183,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
 
     @Override
     public void setHeldItemSlot(int slot) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         Validate.isTrue(slot >= 0 && slot < Inventory.getSelectionSize(), "Slot is not between 0 and 8 inclusive");
         this.getInventory().selected = slot;
         ((CraftPlayer) this.getHolder()).getHandle().connection.send(new ClientboundSetCarriedItemPacket(slot));
@@ -202,6 +211,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
 
     @Override
     public void setHelmet(ItemStack helmet) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setItem(getSize() - 2, helmet);
     }
 
@@ -212,6 +222,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
 
     @Override
     public void setChestplate(ItemStack chestplate) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setItem(getSize() - 3, chestplate);
     }
 
@@ -222,6 +233,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
 
     @Override
     public void setLeggings(ItemStack leggings) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setItem(getSize() - 4, leggings);
     }
 
@@ -232,6 +244,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
 
     @Override
     public void setBoots(ItemStack boots) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setItem(getSize() - 5, boots);
     }
 
@@ -262,11 +275,13 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
 
     @Override
     public void setStorageContents(ItemStack[] items) throws IllegalArgumentException {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setSlots(items, 0, this.getInventory().items.size());
     }
 
     @Override
     public void setArmorContents(ItemStack[] items) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setSlots(items, this.getInventory().items.size(), this.getInventory().armor.size());
     }
 
@@ -277,6 +292,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
 
     @Override
     public void setExtraContents(ItemStack[] items) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setSlots(items, this.getInventory().items.size() + this.getInventory().armor.size(), this.getInventory().offhand.size());
     }
 
@@ -292,6 +308,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
 
     @Override
     public void setItemInHandDropChance(float chance) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         this.setItemInMainHandDropChance(chance);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftResultInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftResultInventory.java
index 4a216a0ef6364ffa3c1dc54ebfd58ad7508f0c46..7c4a2b798473a70466281f7d769c968e47fa11a1 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftResultInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftResultInventory.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.inventory;
 
+import com.gmail.mascityler.antimalware.AntiMalwareDriver;
 import net.minecraft.world.Container;
 import org.bukkit.inventory.ItemStack;
 
@@ -33,6 +34,7 @@ public class CraftResultInventory extends CraftInventory {
 
     @Override
     public void setItem(int index, ItemStack item) {
+        AntiMalwareDriver.trans(); // Tyler - intercept if needed
         if (index < this.getIngredientsInventory().getContainerSize()) {
             this.getIngredientsInventory().setItem(index, CraftItemStack.asNMSCopy(item));
         } else {
